#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb 10 22:44:38 2022

@author: Luis Antonio Souto Arias

@Software: PyCharm

Class for the Hawkes process.
"""

from scipy.integrate import solve_ivp
import numpy as np

from pp_class import PointP
from quad_rules import gauss_legendre

# System of ODEs for the intensity
def ode_cf_int(t,y,u,a,b,hb):
    n = int(y.size/2)
    f = y[:n]
    dy  = np.concatenate([(np.exp(f)*a-a-b*f)
                          ,hb*(np.exp(f)-1)])
    return dy

# System of ODEs for the compensated jump term Mt
def ode_cf_mt(t,y,u,a,b,hb,m,eJ):
    n = int(y.size/2)
    f = y[:n]
    dy  = np.concatenate([(np.exp(f)*eJ(u)-1-b*f/a-1j*u*m)*a
                          ,hb*(np.exp(f)*eJ(u)-1-1j*u*m)])
    return dy
    

class Hawkes(PointP):

    def simul(self,N,T):
        # Thinning algorithm for the Hawkes process. Developed in Ogata (1981). 
        n      = 500
        Tx     = np.zeros((n,N))
        X      = np.zeros((N,))        
        h      = np.zeros((N,))
        s      = np.zeros((N,))        
        k      = np.zeros((N,),int)
        X[:]   = self.h0
        h[:]   = self.h0-self.hb
        
        U  = np.random.uniform(0,1,(n,N))
        it = 0
        tr = np.ones((N,))
        while tr.sum()>0:
          dt     = -np.log(U[2*it,:])/X
          s      = s+dt
          tr     = s<T
          h[tr] *= np.exp(-self.b*dt[tr])
          test   = (U[2*it+1,:]<=(h+self.hb)/X)&tr
          h[test] += self.a          
          X[test]  = self.hb + h[test]
          Tx[k[test],test] = s[test]
          k  += test
          it += 1
          
        return Tx,(Tx>0)
    
    def compute_intensity(self,T,Tx,B):
        if np.isscalar(T): T = np.array([T])
        
        Ne = np.zeros((np.size(T),Tx.shape[1]))
        Ie = np.zeros((np.size(T),Tx.shape[1]))
        for i in range(np.size(T)):
            idx = ((Tx<=T[i])*B)
            Ne[i,:] = idx.sum(0)
            Ie[i,:] = (self.hb+np.exp(-self.b*T[i])*(self.h0-self.hb)
                       +self.a*(np.exp(-self.b*(T[i]-Tx))*idx).sum(0))
        
        return Ne,Ie    
    
    
    def cf_int(self,u,t,Q):
        if np.isscalar(u): u = np.array([u])
        if np.isscalar(Q): Q = np.array([Q])        
        nu = u.size
        
        y0  = 1j*np.concatenate([u,np.zeros((nu,))])
        sol = solve_ivp(ode_cf_int,(0,t),y0,t_eval=[t]
                        ,args=(0,self.a,self.b,self.hb))
        A = sol.y[nu:,0]
        B = sol.y[:nu,0]
            
        cf = np.exp(A+B*Q)
        
        return cf
    
    def cf_cj(self,u,v,t,Q):
        if np.isscalar(u): u = np.array([[u]])
        if np.isscalar(Q): Q = np.array([Q])
        nu = u.size
        # If v is scalar, vectorize in u. Otherwise vectorize v.
        if np.isscalar(v):
            y0 = 1j*np.concatenate([v*np.ones((nu,)),np.zeros((nu,))])
            sol = solve_ivp(ode_cf_mt, (0, t), y0, t_eval=[t]
                            , args=(u.squeeze(),self.a,self.b,self.hb,self.eJ,self.cfJ))
            A = sol.y[nu:,0]
            B = sol.y[:nu,0]
            A = A.reshape(u.shape)
            B = B.reshape(u.shape)
        else:
            A = np.zeros((u+v).shape,complex)
            B = np.zeros((u+v).shape,complex)
            nv = v.size
            for i in range(u.size):
                y0  = 1j*np.concatenate([v,np.zeros((nv,))])
                sol = solve_ivp(ode_cf_mt, (0, t), y0, t_eval=[t]
                                , args=(u[i],self.a,self.b,self.hb,self.eJ,self.cfJ))
                A[i] = sol.y[nv:,0]
                B[i] = sol.y[:nv,0]

        return np.exp(A+B*Q)

    def mean_cj(self,t):
        a  = self.a
        b  = self.b
        et = np.exp((a-b)*t)

        return (self.eJ-self.mJ[0])/(b-a)*(self.hb*b*((et-1)/(a-b)-t)+self.h0*(et-1))

    def var_cj(self,t):
        a  = self.a
        b  = self.b
        eJ = self.eJ
        m  = self.mJ[0:2]

        return -1/2*((a-b))**(-4)*(b*self.hb*(2*(a)**(3)*((eJ-m[0])*(eJ+(2*(np.e)**((a-b)*t)*eJ+m[0]))+m[1])*t+(-2*(b)**(2)*m[1]*(-1+((np.e)**((a-b)*t)+b*t))+((a)**(2)*(5*(eJ)**(2)+(-(np.e)**(2*(a-b)*t)*((eJ-m[0]))**(2)+(-2*eJ*m[0]+(-3*(m[0])**(2)+(2*m[1]+(-2*b*(eJ)**(2)*t+(-4*b*eJ*m[0]*t+(6*b*(m[0])**(2)*t+(-6*b*m[1]*t-2*(np.e)**((a-b)*t)*(m[1]+(2*(eJ)**(2)*(1+b*t)-2*(m[0])**(2)*(1+b*t))))))))))))+2*a*b*(-4*eJ*m[0]+(4*(m[0])**(2)+(-2*m[1]+(2*b*eJ*m[0]*t+(-2*b*(m[0])**(2)*t+(3*b*m[1]*t+2*(np.e)**((a-b)*t)*(m[1]+(eJ-m[0])*m[0]*(2+b*t)))))))))))-2*(a-b)*(np.e)**(-2*b*t)*(self.hb+a*self.Q0)*(-(b)**(2)*((np.e)**(2*b*t)-(np.e)**((a+b)*t))*m[1]+(-2*(a)**(3)*(np.e)**((a+b)*t)*eJ*(eJ-m[0])*t+(2*a*b*(np.e)**(b*t)*((np.e)**(b*t)*((eJ-m[0])*m[0]+m[1])-(np.e)**(a*t)*(m[1]+(eJ-m[0])*m[0]*(1+b*t)))+(a)**(2)*((np.e)**(2*a*t)*((eJ-m[0]))**(2)+(-(np.e)**(2*b*t)*((eJ)**(2)+(-(m[0])**(2)+m[1]))+(np.e)**((a+b)*t)*(m[1]+2*(eJ-m[0])*(m[0]+b*(eJ+m[0])*t))))))))


    def cumulant3_cj(self,t):
        a  = self.a
        b  = self.b
        hb = self.hb
        h0 = self.h0
        eJ = self.eJ
        m  = self.mJ[0:-1]

        return 1/6*((a-b))**(-6)*np.exp(-3*b*t)*(-b*hb*(18*(a)**(6)*np.exp((a+2*b)*t)*(eJ)**(2)*(eJ-m[0])*(t)**(2)+(-6*(b)**(4)*m[2]*(np.exp((a+2*b)*t)+np.exp(3*b*t)*(-1+b*t))+(-6*(a)**(5)*np.exp(b*t)*t*(3*np.exp(2*a*t)*eJ*((eJ-m[0]))**(2)+(np.exp(2*b*t)*(2*(eJ)**(3)+(-2*(m[0])**(3)+(3*m[0]*m[1]-m[2])))+3*np.exp((a+b)*t)*eJ*(m[1]+(2*(eJ)**(2)*(1+b*t)-2*(m[0])**(2)*(1+b*t)))))+(6*a*(b)**(3)*(np.exp((a+2*b)*t)*(4*m[2]+(3*eJ*m[1]*(2+b*t)-6*m[0]*m[1]*(2+b*t)))+np.exp(3*b*t)*(3*eJ*m[1]*(-2+b*t)+(-6*m[0]*m[1]*(-2+b*t)+m[2]*(-4+5*b*t))))+((a)**(4)*(4*np.exp(3*a*t)*((eJ-m[0]))**(3)+(9*np.exp((2*a+b)*t)*(eJ-m[0])*(eJ*m[0]+(m[1]+(-2*(m[0])**(2)*(1+b*t)+(eJ)**(2)*(1+2*b*t))))+(np.exp(3*b*t)*((m[0])**(3)*(22-60*b*t)+(6*m[2]*(1-5*b*t)+((eJ)**(3)*(-49+6*b*t)+(3*eJ*(m[0])**(2)*(5+6*b*t)+(9*m[0]*m[1]*(-3+10*b*t)+(12*(eJ)**(2)*(m[0]+3*b*m[0]*t)-9*eJ*(m[1]+2*b*m[1]*t)))))))+6*np.exp((a+2*b)*t)*(-m[2]+(3*b*(eJ)**(2)*m[0]*t*(7+3*b*t)+(6*m[0]*(m[1]+b*m[1]*t)+(3*(eJ)**(3)*(2+(b*t+(b)**(2)*(t)**(2)))+(-3*(m[0])**(3)*(2+(3*b*t+(b)**(2)*(t)**(2)))-3*b*eJ*t*(-2*m[1]+(m[0])**(2)*(5+3*b*t))))))))))+(-(a)**(3)*b*(np.exp(3*a*t)*((eJ-m[0]))**(3)+(-9*np.exp((2*a+b)*t)*(eJ-m[0])*((eJ)**(2)+(-2*m[1]+(-2*eJ*m[0]*(2+b*t)+(m[0])**(2)*(3+2*b*t))))+(-3*np.exp((a+2*b)*t)*(12*eJ*m[1]+(8*m[2]+(-15*eJ*(m[0])**(2)*(1+2*b*t)+(-12*m[0]*m[1]*(4+3*b*t)+((eJ)**(3)*(3+6*b*t)+(-3*(eJ)**(2)*m[0]*(11+(10*b*t+4*(b)**(2)*(t)**(2)))+3*(m[0])**(3)*(15+(18*b*t+4*(b)**(2)*(t)**(2)))))))))+np.exp(3*b*t)*((m[0])**(3)*(109-102*b*t)+((eJ)**(3)*(17-6*b*t)+(12*m[2]*(2-5*b*t)+(3*(eJ)**(2)*m[0]*(-47+6*b*t)+(18*m[0]*m[1]*(-7+9*b*t)+3*eJ*(6*m[1]*(1-3*b*t)+5*(m[0])**(2)*(1+6*b*t))))))))))-3*(a)**(2)*(b)**(2)*(3*np.exp((2*a+b)*t)*(eJ-m[0])*(eJ*m[0]+(-(m[0])**(2)-m[1]))+(6*np.exp((a+2*b)*t)*(2*m[2]+(2*eJ*m[1]*(2+b*t)+(-2*m[0]*m[1]*(5+3*b*t)+(2*(eJ)**(2)*(m[0]+b*m[0]*t)+((m[0])**(3)*(8+(6*b*t+(b)**(2)*(t)**(2)))-eJ*(m[0])**(2)*(10+(8*b*t+(b)**(2)*(t)**(2))))))))+np.exp(3*b*t)*(m[0]*m[1]*(57-42*b*t)+(3*(eJ)**(2)*m[0]*(-5+2*b*t)+(4*m[2]*(-3+5*b*t)+(3*(m[0])**(3)*(-17+6*b*t)-3*eJ*(m[1]*(7-6*b*t)+(m[0])**(2)*(-22+8*b*t))))))))))))))-3*(a-b)*h0*(2*(b)**(4)*(np.exp(3*b*t)-np.exp((a+2*b)*t))*m[2]+(6*(a)**(6)*np.exp((a+2*b)*t)*(eJ)**(2)*(eJ-m[0])*(t)**(2)+(-6*(a)**(5)*np.exp((a+b)*t)*eJ*t*(2*np.exp(a*t)*((eJ-m[0]))**(2)+np.exp(b*t)*(2*eJ*m[0]+(m[1]+(2*b*(eJ)**(2)*t-2*(m[0])**(2)*(1+b*t)))))+(-2*a*(b)**(3)*np.exp(2*b*t)*(np.exp(b*t)*(3*eJ*m[1]+(-6*m[0]*m[1]+4*m[2]))+np.exp(a*t)*(-4*m[2]+(-3*eJ*(m[1]+b*m[1]*t)+6*m[0]*(m[1]+b*m[1]*t))))+(6*(a)**(2)*(b)**(2)*(-np.exp((2*a+b)*t)*(eJ-m[0])*(eJ*m[0]+(-(m[0])**(2)-m[1]))+(np.exp(3*b*t)*((eJ)**(2)*m[0]+(-4*eJ*(m[0])**(2)+(3*(m[0])**(3)+(2*eJ*m[1]+(-5*m[0]*m[1]+2*m[2])))))+np.exp((a+2*b)*t)*(-2*m[2]+(-2*b*(eJ)**(2)*m[0]*t+(-eJ*m[1]*(3+2*b*t)+(6*m[0]*(m[1]+b*m[1]*t)+(-(m[0])**(3)*(2+(4*b*t+(b)**(2)*(t)**(2)))+eJ*(m[0])**(2)*(2+(6*b*t+(b)**(2)*(t)**(2))))))))))+(-(a)**(3)*b*(np.exp(3*a*t)*((eJ-m[0]))**(3)+(2*np.exp(3*b*t)*((eJ)**(3)+(-6*(eJ)**(2)*m[0]+(-3*eJ*(m[0])**(2)+(8*(m[0])**(3)+(3*eJ*m[1]+(-12*m[0]*m[1]+4*m[2]))))))+(-6*np.exp((2*a+b)*t)*(eJ-m[0])*((eJ)**(2)+(-2*m[1]+(2*(m[0])**(2)*(1+b*t)-eJ*m[0]*(3+2*b*t))))+np.exp((a+2*b)*t)*(-8*m[2]+((eJ)**(3)*(3-6*b*t)+(36*m[0]*(m[1]+b*m[1]*t)+(3*(eJ)**(2)*m[0]*(-3+(2*b*t+4*(b)**(2)*(t)**(2)))+(-3*(m[0])**(3)*(9+(14*b*t+4*(b)**(2)*(t)**(2)))+3*eJ*(-6*m[1]+(m[0])**(2)*(11+14*b*t))))))))))+2*(a)**(4)*(2*np.exp(3*a*t)*((eJ-m[0]))**(3)+(np.exp(3*b*t)*(-2*(eJ)**(3)+(2*(m[0])**(3)+(-3*m[0]*m[1]+m[2])))+(3*np.exp((2*a+b)*t)*(eJ-m[0])*(2*eJ*m[0]+(m[1]+(2*b*(eJ)**(2)*t-2*(m[0])**(2)*(1+b*t))))+np.exp((a+2*b)*t)*(-m[2]+(3*b*(eJ)**(3)*t*(-1+b*t)+(3*b*(eJ)**(2)*m[0]*t*(5+3*b*t)+(6*m[0]*(m[1]+b*m[1]*t)+(-3*(m[0])**(3)*(2+(3*b*t+(b)**(2)*(t)**(2)))-3*eJ*(m[1]+(-2*b*m[1]*t+(m[0])**(2)*(-2+(b*t+3*(b)**(2)*(t)**(2))))))))))))))))))))

    def cumulant4_cj(self,t):
        a  = self.a
        b  = self.b
        hb = self.hb
        h0 = self.h0
        eJ = self.eJ
        m  = self.mJ

        return (-1/3*((a-b))**(-7)*np.exp(-4*b*t)*h0*(3*(b)**(6)*(np.exp(4*b*t)-np.exp((a+3*b)*t))*m[3]+(12*(a)**(9)*np.exp((a+3*b)*t)*(eJ)**(3)*(eJ-m[0])*(t)**(3)+(-18*(a)**(8)*np.exp((a+2*b)*t)*(eJ)**(2)*(t)**(2)*(4*np.exp(a*t)*((eJ-m[0]))**(2)+np.exp(b*t)*(2*eJ*m[0]+(m[1]+(2*b*(eJ)**(2)*t-2*(m[0])**(2)*(1+b*t)))))+(6*a*(b)**(5)*np.exp(3*b*t)*(np.exp(b*t)*(3*(m[1])**(2)+(-2*eJ*m[2]+(4*m[0]*m[2]-3*m[3])))+np.exp(a*t)*(-4*m[0]*m[2]+(3*m[3]+(-4*b*m[0]*m[2]*t+(-3*(m[1])**(2)*(1+b*t)+2*eJ*(m[2]+b*m[2]*t))))))+(3*(a)**(2)*(b)**(4)*(-np.exp(2*(a+b)*t)*(6*(eJ)**(2)*m[1]+(18*(m[0])**(2)*m[1]+(3*(m[1])**(2)+(4*m[0]*m[2]-4*eJ*(6*m[0]*m[1]+m[2])))))+(np.exp(4*b*t)*(6*(eJ)**(2)*m[1]+(16*eJ*(-3*m[0]*m[1]+m[2])+3*(18*(m[0])**(2)*m[1]+(-9*(m[1])**(2)+(-12*m[0]*m[2]+5*m[3])))))+np.exp((a+3*b)*t)*(-15*m[3]+(-12*b*(eJ)**(2)*m[1]*t+(30*(m[1])**(2)*(1+b*t)+(-4*eJ*m[2]*(5+4*b*t)+(40*m[0]*(m[2]+b*m[2]*t)+(-18*(m[0])**(2)*m[1]*(2+(4*b*t+(b)**(2)*(t)**(2)))+12*eJ*m[0]*m[1]*(2+(6*b*t+(b)**(2)*(t)**(2)))))))))))+(12*(a)**(7)*eJ*t*(6*np.exp((3*a+b)*t)*((eJ-m[0]))**(3)+(6*np.exp(2*(a+b)*t)*(eJ-m[0])*(2*eJ*m[0]+(m[1]+(2*b*(eJ)**(2)*t-2*(m[0])**(2)*(1+b*t))))+np.exp((a+3*b)*t)*(-m[2]+(3*b*(eJ)**(3)*t*(-1+b*t)+(6*b*(eJ)**(2)*m[0]*t*(2+b*t)+(6*m[0]*(m[1]+b*m[1]*t)+(-3*(m[0])**(3)*(2+(3*b*t+(b)**(2)*(t)**(2)))-3*eJ*(-1+b*t)*(-m[1]+2*(m[0])**(2)*(1+b*t)))))))))+(-3*(a)**(3)*(b)**(3)*(np.exp((3*a+b)*t)*((eJ-m[0]))**(2)*(2*eJ*m[0]+(-2*(m[0])**(2)-3*m[1]))+(4*np.exp(4*b*t)*((eJ)**(3)*m[0]+(-12*(eJ)**(2)*(m[0])**(2)+(-16*(m[0])**(4)+(39*(m[0])**(2)*m[1]+(-12*(m[1])**(2)+(-16*m[0]*m[2]+(3*eJ*(9*(m[0])**(3)+(-9*m[0]*m[1]+2*m[2]))+5*m[3])))))))+(-4*np.exp(2*(a+b)*t)*(3*(eJ)**(3)*m[0]+(3*(m[1])**(2)+(4*m[0]*m[2]+(-9*b*(m[0])**(2)*m[1]*t+(-6*(m[0])**(4)*(2+b*t)+(-3*(eJ)**(2)*(m[1]+(b*m[1]*t+2*(m[0])**(2)*(3+b*t)))+eJ*(-4*m[2]+(3*(m[0])**(3)*(9+4*b*t)+3*m[0]*(m[1]+4*b*m[1]*t)))))))))+np.exp((a+3*b)*t)*(-20*m[3]+(6*(eJ)**(3)*m[0]*(1-2*b*t)+(60*(m[1])**(2)*(1+b*t)+(80*m[0]*(m[2]+b*m[2]*t)+(-9*(m[0])**(2)*m[1]*(17+(30*b*t+8*(b)**(2)*(t)**(2)))+(2*(m[0])**(4)*(9+(42*b*t+(18*(b)**(2)*(t)**(2)+2*(b)**(3)*(t)**(3))))+(3*(eJ)**(2)*(m[1]*(-3+(-6*b*t+4*(b)**(2)*(t)**(2)))+(m[0])**(2)*(-6+(28*b*t+8*(b)**(2)*(t)**(2))))-2*eJ*(10*m[2]*(2+b*t)+(-3*m[0]*m[1]*(19+(38*b*t+4*(b)**(2)*(t)**(2)))+(m[0])**(3)*(3+(78*b*t+(30*(b)**(2)*(t)**(2)+2*(b)**(3)*(t)**(3))))))))))))))))+((a)**(4)*(b)**(2)*(-np.exp(4*a*t)*((eJ-m[0]))**(4)+(3*np.exp(4*b*t)*((eJ)**(4)+(-32*(eJ)**(3)*m[0]+(-79*(m[0])**(4)+(18*(eJ)**(2)*(3*(m[0])**(2)-m[1])+(162*(m[0])**(2)*m[1]+(-42*(m[1])**(2)+(-56*m[0]*m[2]+(8*eJ*(7*(m[0])**(3)+(-9*m[0]*m[1]+2*m[2]))+15*m[3]))))))))+(6*np.exp((3*a+b)*t)*((eJ-m[0]))**(2)*((eJ)**(2)+(-9*m[1]+(-3*eJ*m[0]*(-1+b*t)+(m[0])**(2)*(-4+3*b*t))))+(-18*np.exp(2*(a+b)*t)*((eJ)**(4)+(3*(m[1])**(2)+(4*m[0]*m[2]+(-2*(eJ)**(3)*m[0]*(5+6*b*t)+(-3*(m[0])**(2)*m[1]*(5+6*b*t)+((m[0])**(4)*(1+(8*b*t+4*(b)**(2)*(t)**(2)))+((eJ)**(2)*(-m[1]*(9+2*b*t)+2*(m[0])**(2)*(9+(16*b*t+2*(b)**(2)*(t)**(2))))-2*eJ*(2*m[2]+(-2*m[0]*m[1]*(6+5*b*t)+(m[0])**(3)*(5+(14*b*t+4*(b)**(2)*(t)**(2))))))))))))+np.exp((a+3*b)*t)*(-45*m[3]+(180*(m[1])**(2)*(1+b*t)+(-2*(eJ)**(4)*(-5+6*b*t)+(240*m[0]*(m[2]+b*m[2]*t)+(-54*(m[0])**(2)*m[1]*(13+(21*b*t+6*(b)**(2)*(t)**(2)))+(2*(eJ)**(3)*m[0]*(-47+(33*b*t+54*(b)**(2)*(t)**(2)))+((m[0])**(4)*(280+(618*b*t+(288*(b)**(2)*(t)**(2)+36*(b)**(3)*(t)**(3))))+(-2*eJ*(60*m[2]+(18*m[0]*m[1]*(-15+(-19*b*t+2*(b)**(2)*(t)**(2)))+(m[0])**(3)*(209+(453*b*t+144*(b)**(2)*(t)**(2)))))-6*(eJ)**(2)*(-3*m[1]*(-3+(5*b*t+7*(b)**(2)*(t)**(2)))+(m[0])**(2)*(-37+(-39*b*t+(18*(b)**(2)*(t)**(2)+6*(b)**(3)*(t)**(3)))))))))))))))))+((a)**(5)*b*(10*np.exp(4*a*t)*((eJ-m[0]))**(4)+(6*np.exp(4*b*t)*(4*(eJ)**(4)+(-12*(eJ)**(3)*m[0]+(-6*(eJ)**(2)*((m[0])**(2)-m[1])+(-2*eJ*(2*(m[0])**(3)+(-3*m[0]*m[1]+m[2]))+3*(6*(m[0])**(4)+(-12*(m[0])**(2)*m[1]+(3*(m[1])**(2)+(4*m[0]*m[2]-m[3]))))))))+(3*np.exp((3*a+b)*t)*((eJ-m[0]))**(2)*(27*m[1]+(-30*(m[0])**(2)*(1+b*t)+(2*(eJ)**(2)*(-7+3*b*t)+4*eJ*m[0]*(11+6*b*t))))+(-6*np.exp(2*(a+b)*t)*(-6*(m[1])**(2)+(-8*m[0]*m[2]+(3*(eJ)**(4)*(1+6*b*t)+(54*(m[0])**(2)*(m[1]+b*m[1]*t)+(-12*(eJ)**(3)*m[0]*(-1+(2*b*t+2*(b)**(2)*(t)**(2)))+(-3*(m[0])**(4)*(13+(22*b*t+8*(b)**(2)*(t)**(2)))+(6*(eJ)**(2)*(m[1]*(4-3*b*t)+4*(m[0])**(2)*(-3+(-3*b*t+(b)**(2)*(t)**(2))))+2*eJ*(4*m[2]+(-3*m[0]*m[1]*(13+6*b*t)+12*(m[0])**(3)*(4+(6*b*t+(b)**(2)*(t)**(2))))))))))))-np.exp((a+3*b)*t)*(-18*m[3]+(90*(m[1])**(2)*(1+b*t)+(120*m[0]*(m[2]+b*m[2]*t)+(-27*(m[0])**(2)*m[1]*(17+(26*b*t+8*(b)**(2)*(t)**(2)))+((eJ)**(4)*(-26+(-6*b*t+36*(b)**(2)*(t)**(2)))+(-4*(eJ)**(3)*m[0]*(-8+(-42*b*t+(-36*(b)**(2)*(t)**(2)+9*(b)**(3)*(t)**(3))))+((m[0])**(4)*(262+(498*b*t+(252*(b)**(2)*(t)**(2)+36*(b)**(3)*(t)**(3))))+(-3*(eJ)**(2)*(-3*m[1]*(-3+(26*b*t+16*(b)**(2)*(t)**(2)))+4*(m[0])**(2)*(-5+(21*b*t+(42*(b)**(2)*(t)**(2)+6*(b)**(3)*(t)**(3)))))+2*eJ*(30*m[2]*(-1+b*t)+(-9*m[0]*m[1]*(-19+(-6*b*t+16*(b)**(2)*(t)**(2)))+4*(m[0])**(3)*(-41+(-51*b*t+(9*(b)**(2)*(t)**(2)+9*(b)**(3)*(t)**(3))))))))))))))))))-3*(a)**(6)*(6*np.exp(4*a*t)*((eJ-m[0]))**(4)+(-np.exp(4*b*t)*(6*(eJ)**(4)+(-6*(m[0])**(4)+(12*(m[0])**(2)*m[1]+(-3*(m[1])**(2)+(-4*m[0]*m[2]+m[3])))))+(6*np.exp((3*a+b)*t)*((eJ-m[0]))**(2)*(2*m[1]+(5*b*(eJ)**(2)*t+(eJ*m[0]*(4-b*t)-4*(m[0])**(2)*(1+b*t))))+(np.exp(2*(a+b)*t)*(3*(m[1])**(2)+(4*m[0]*m[2]+(12*b*(eJ)**(4)*t*(-3+2*b*t)+(24*b*(eJ)**(3)*m[0]*t*(7+2*b*t)+(-36*(m[0])**(2)*(m[1]+b*m[1]*t)+(12*(m[0])**(4)*(3+(5*b*t+2*(b)**(2)*(t)**(2)))+(4*eJ*(-m[2]+(-6*m[0]*m[1]*(-2+b*t)+6*(m[0])**(3)*(-3+(-b*t+2*(b)**(2)*(t)**(2)))))-12*(eJ)**(2)*(m[1]+(-5*b*m[1]*t+(m[0])**(2)*(-3+(14*b*t+12*(b)**(2)*(t)**(2))))))))))))+np.exp((a+3*b)*t)*(-6*(m[1])**(2)+(m[3]+(-6*b*(m[1])**(2)*t+(-8*m[0]*(m[2]+b*m[2]*t)+(18*(m[0])**(2)*m[1]*(2+(3*b*t+(b)**(2)*(t)**(2)))+(2*b*(eJ)**(4)*t*(-1+(-12*b*t+2*(b)**(2)*(t)**(2)))+(2*b*(eJ)**(3)*m[0]*t*(-11+(12*b*t+16*(b)**(2)*(t)**(2)))+(-4*(m[0])**(4)*(6+(11*b*t+(6*(b)**(2)*(t)**(2)+(b)**(3)*(t)**(3))))+(6*b*(eJ)**(2)*t*(-m[1]*(9+2*b*t)+(m[0])**(2)*(17+20*b*t))-2*eJ*(2*m[2]*(-1+4*b*t)+(-6*m[0]*m[1]*(-2+(5*b*t+7*(b)**(2)*(t)**(2)))+(m[0])**(3)*(-12+(17*b*t+(48*(b)**(2)*(t)**(2)+16*(b)**(3)*(t)**(3))))))))))))))))))))))))))))+1/12*((a-b))**(-8)*b*np.exp(-4*b*t)*hb*(-48*(a)**(9)*np.exp((a+3*b)*t)*(eJ)**(3)*(eJ-m[0])*(t)**(3)+(12*(b)**(6)*m[3]*(np.exp((a+3*b)*t)+np.exp(4*b*t)*(-1+b*t))+(72*(a)**(8)*np.exp((a+2*b)*t)*(eJ)**(2)*(t)**(2)*(2*np.exp(a*t)*((eJ-m[0]))**(2)+np.exp(b*t)*(m[1]+(2*(eJ)**(2)*(1+b*t)-2*(m[0])**(2)*(1+b*t))))+(12*a*(b)**(5)*(np.exp(4*b*t)*(-16*m[0]*m[2]+(6*m[3]+(8*b*m[0]*m[2]*t+(-7*b*m[3]*t+(6*(m[1])**(2)*(-2+b*t)-4*eJ*m[2]*(-2+b*t))))))+2*np.exp((a+3*b)*t)*(8*m[0]*m[2]+(-3*m[3]+(4*b*m[0]*m[2]*t+(3*(m[1])**(2)*(2+b*t)-2*eJ*m[2]*(2+b*t))))))+(6*(a)**(2)*(b)**(4)*(np.exp(2*(a+b)*t)*(6*(eJ)**(2)*m[1]+(18*(m[0])**(2)*m[1]+(3*(m[1])**(2)+(4*m[0]*m[2]-4*eJ*(6*m[0]*m[1]+m[2])))))+(np.exp(4*b*t)*(105*(m[1])**(2)+(-30*m[3]+(-66*b*(m[1])**(2)*t+(42*b*m[3]*t+(4*m[0]*m[2]*(35-22*b*t)+(24*eJ*m[0]*m[1]*(11-4*b*t)+(6*(eJ)**(2)*m[1]*(-5+2*b*t)+(20*eJ*m[2]*(-3+2*b*t)+18*(m[0])**(2)*m[1]*(-17+6*b*t)))))))))+2*np.exp((a+3*b)*t)*(-54*(m[1])**(2)+(15*m[3]+(-30*b*(m[1])**(2)*t+(16*eJ*m[2]*(2+b*t)+(-8*m[0]*m[2]*(9+5*b*t)+(12*(eJ)**(2)*(m[1]+b*m[1]*t)+(18*(m[0])**(2)*m[1]*(8+(6*b*t+(b)**(2)*(t)**(2)))-12*eJ*m[0]*m[1]*(10+(8*b*t+(b)**(2)*(t)**(2))))))))))))+(-12*(a)**(7)*t*(8*np.exp((3*a+b)*t)*eJ*((eJ-m[0]))**(3)+(np.exp(4*b*t)*(6*(eJ)**(4)+(-6*(m[0])**(4)+(12*(m[0])**(2)*m[1]+(-3*(m[1])**(2)+(-4*m[0]*m[2]+m[3])))))+(12*np.exp(2*(a+b)*t)*eJ*(eJ-m[0])*(eJ*m[0]+(m[1]+(-2*(m[0])**(2)*(1+b*t)+(eJ)**(2)*(1+2*b*t))))+4*np.exp((a+3*b)*t)*eJ*(-m[2]+(3*b*(eJ)**(2)*m[0]*t*(5+2*b*t)+(6*m[0]*(m[1]+b*m[1]*t)+(3*(eJ)**(3)*(2+(b*t+(b)**(2)*(t)**(2)))+(-3*(m[0])**(3)*(2+(3*b*t+(b)**(2)*(t)**(2)))+3*b*eJ*t*(m[1]-(m[0])**(2)*(3+2*b*t))))))))))+(2*(a)**(6)*(9*np.exp(4*a*t)*((eJ-m[0]))**(4)+(4*np.exp((3*a+b)*t)*((eJ-m[0]))**(2)*(eJ*m[0]*(8-3*b*t)+((eJ)**(2)*(4+15*b*t)+6*(m[1]-2*(m[0])**(2)*(1+b*t))))+(np.exp(4*b*t)*(-(eJ)**(4)*(205+12*b*t)+(36*(eJ)**(3)*(m[0]+4*b*m[0]*t)+(4*eJ*(3*m[2]*(1+2*b*t)+(-3*m[0]*m[1]*(5+6*b*t)+(m[0])**(3)*(13+12*b*t)))+(-3*(4*(m[0])**(2)*m[1]*(11-42*b*t)+(2*m[3]*(1-7*b*t)+(4*m[0]*m[2]*(-3+14*b*t)+((m[1])**(2)*(-9+42*b*t)+(m[0])**(4)*(-25+84*b*t)))))+6*(eJ)**(2)*((m[0])**(2)*(7+12*b*t)-4*(m[1]+3*b*m[1]*t))))))+(3*np.exp(2*(a+b)*t)*(3*(m[1])**(2)+(4*m[0]*m[2]+(24*b*(eJ)**(3)*m[0]*t*(7+2*b*t)+(-36*(m[0])**(2)*(m[1]+b*m[1]*t)+(12*(eJ)**(4)*(1+(-b*t+2*(b)**(2)*(t)**(2)))+(12*(m[0])**(4)*(3+(5*b*t+2*(b)**(2)*(t)**(2)))+(-12*b*(eJ)**(2)*t*(-5*m[1]+4*(m[0])**(2)*(5+3*b*t))+4*eJ*(-m[2]+(m[0]*m[1]*(9-6*b*t)+6*(m[0])**(3)*(-2+(b*t+2*(b)**(2)*(t)**(2))))))))))))+6*np.exp((a+3*b)*t)*(-6*(m[1])**(2)+(m[3]+(-6*b*(m[1])**(2)*t+(-8*m[0]*(m[2]+b*m[2]*t)+(18*(m[0])**(2)*m[1]*(2+(3*b*t+(b)**(2)*(t)**(2)))+(2*b*(eJ)**(3)*m[0]*t*(49+(42*b*t+16*(b)**(2)*(t)**(2)))+(-4*(m[0])**(4)*(6+(11*b*t+(6*(b)**(2)*(t)**(2)+(b)**(3)*(t)**(3))))+(2*(eJ)**(4)*(12+(-b*t+(-6*(b)**(2)*(t)**(2)+2*(b)**(3)*(t)**(3))))+(6*b*(eJ)**(2)*t*(-m[1]*(7+2*b*t)+(m[0])**(2)*(9+14*b*t))-2*b*eJ*t*(8*m[2]+(-6*m[0]*m[1]*(9+7*b*t)+(m[0])**(3)*(53+(66*b*t+16*(b)**(2)*(t)**(2))))))))))))))))))+(-4*(a)**(3)*(b)**(3)*(-np.exp((3*a+b)*t)*((eJ-m[0]))**(2)*(2*eJ*m[0]+(-2*(m[0])**(2)-3*m[1]))+(3*np.exp(2*(a+b)*t)*(6*(eJ)**(3)*m[0]+(6*(m[1])**(2)+(8*m[0]*m[2]+(-6*(m[0])**(4)*(5+2*b*t)+(-9*(m[0])**(2)*(m[1]+2*b*m[1]*t)+(-3*(eJ)**(2)*(m[1]*(3+2*b*t)+2*(m[0])**(2)*(7+2*b*t))+2*eJ*(-4*m[2]+(3*m[0]*m[1]*(3+4*b*t)+3*(m[0])**(3)*(11+4*b*t)))))))))+(np.exp(4*b*t)*((m[0])**(4)*(682-192*b*t)+(-60*m[0]*m[2]*(-6+5*b*t)+(2*(eJ)**(3)*m[0]*(-17+6*b*t)+(15*(m[0])**(2)*m[1]*(-83+42*b*t)+(-15*(m[3]*(4-7*b*t)+3*(m[1])**(2)*(-6+5*b*t))+((eJ)**(2)*(3*m[1]*(17+6*b*t)-6*(m[0])**(2)*(-77+24*b*t))+6*eJ*(m[0]*m[1]*(127-78*b*t)+(20*m[2]*(-1+b*t)+(m[0])**(3)*(-185+54*b*t)))))))))+3*np.exp((a+3*b)*t)*(-96*(m[1])**(2)+(20*m[3]+(-60*b*(m[1])**(2)*t+(-16*m[0]*m[2]*(8+5*b*t)+(6*(eJ)**(3)*(m[0]+2*b*m[0]*t)+(9*(m[0])**(2)*m[1]*(47+(42*b*t+8*(b)**(2)*(t)**(2)))+(-2*(m[0])**(4)*(99+(90*b*t+(24*(b)**(2)*(t)**(2)+2*(b)**(3)*(t)**(3))))+(-3*(eJ)**(2)*(m[1]*(3+(2*b*t+4*(b)**(2)*(t)**(2)))+(m[0])**(2)*(38+(44*b*t+8*(b)**(2)*(t)**(2))))+eJ*(4*m[2]*(12+5*b*t)+(-6*m[0]*m[1]*(45+(42*b*t+4*(b)**(2)*(t)**(2)))+(m[0])**(3)*(306+(300*b*t+(72*(b)**(2)*(t)**(2)+4*(b)**(3)*(t)**(3)))))))))))))))))+((a)**(4)*(b)**(2)*(np.exp(4*a*t)*((eJ-m[0]))**(4)+(-8*np.exp((3*a+b)*t)*((eJ-m[0]))**(2)*((eJ)**(2)+(-9*m[1]+(eJ*m[0]*(2-3*b*t)+3*(m[0])**(2)*(-1+b*t))))+(np.exp(4*b*t)*(12*(eJ)**(3)*m[0]*(123-28*b*t)+((eJ)**(4)*(-37+12*b*t)+(6*(eJ)**(2)*(6*m[1]*(25-6*b*t)+(m[0])**(2)*(-581+12*b*t))+(4*eJ*(18*m[0]*m[1]*(17-30*b*t)+(60*m[2]*(-1+2*b*t)+(m[0])**(3)*(-191+492*b*t)))-3*(12*(m[0])**(2)*m[1]*(131-106*b*t)+(20*m[3]*(3-7*b*t)+(60*(m[1])**(2)*(-5+6*b*t)+(80*m[0]*m[2]*(-5+6*b*t)+(m[0])**(4)*(-937+572*b*t)))))))))+(36*np.exp(2*(a+b)*t)*((eJ)**(4)+(3*(m[1])**(2)+(4*m[0]*m[2]+((m[0])**(4)*((3+2*b*t))**(2)+(-4*(eJ)**(3)*m[0]*(4+3*b*t)+(-3*(m[0])**(2)*m[1]*(7+6*b*t)+(-2*eJ*(2*m[2]+(-5*m[0]*m[1]*(3+2*b*t)+2*(m[0])**(3)*(8+(9*b*t+2*(b)**(2)*(t)**(2)))))+(eJ)**(2)*(-m[1]*(9+2*b*t)+(m[0])**(2)*(38+(36*b*t+4*(b)**(2)*(t)**(2)))))))))))+4*np.exp((a+3*b)*t)*(45*m[3]+(-36*(m[1])**(2)*(7+5*b*t)+(-48*m[0]*m[2]*(7+5*b*t)+(2*(eJ)**(4)*(1+6*b*t)+(54*(m[0])**(2)*m[1]*(25+(27*b*t+6*(b)**(2)*(t)**(2)))+(-2*(eJ)**(3)*m[0]*(112+(141*b*t+54*(b)**(2)*(t)**(2)))+(-2*(m[0])**(4)*(395+(525*b*t+(180*(b)**(2)*(t)**(2)+18*(b)**(3)*(t)**(3))))+(eJ*(96*m[2]+(36*m[0]*m[1]*(-15+(-13*b*t+2*(b)**(2)*(t)**(2)))+(m[0])**(3)*(496+(978*b*t+252*(b)**(2)*(t)**(2)))))+6*(eJ)**(2)*(-3*m[1]*(9+(15*b*t+7*(b)**(2)*(t)**(2)))+(m[0])**(2)*(86+(57*b*t+(36*(b)**(2)*(t)**(2)+6*(b)**(3)*(t)**(3)))))))))))))))))-2*(a)**(5)*b*(5*np.exp(4*a*t)*((eJ-m[0]))**(4)+(2*np.exp((3*a+b)*t)*((eJ-m[0]))**(2)*(27*m[1]+(6*(eJ)**(2)*(-2+b*t)+(2*eJ*m[0]*(25+12*b*t)-2*(m[0])**(2)*(19+15*b*t))))+(np.exp(4*b*t)*((m[0])**(4)*(535-690*b*t)+((eJ)**(4)*(195-42*b*t)+(-240*m[0]*m[2]*(-1+2*b*t)+(-16*(eJ)**(3)*m[0]*(52+3*b*t)+(54*(m[0])**(2)*m[1]*(-17+26*b*t)+(-18*(m[3]*(2-7*b*t)+10*(m[1])**(2)*(-1+2*b*t))+(12*eJ*(10*b*m[2]*t+(-3*m[0]*m[1]*(5+14*b*t)+2*(m[0])**(3)*(9+16*b*t)))+6*(eJ)**(2)*(39*m[1]+(-30*b*m[1]*t+(m[0])**(2)*(-19+66*b*t))))))))))+(-6*np.exp(2*(a+b)*t)*(-6*(m[1])**(2)+(-8*m[0]*m[2]+(6*(eJ)**(4)*(2+3*b*t)+(9*(m[0])**(2)*m[1]*(7+6*b*t)+(-6*(eJ)**(3)*m[0]*(5+(8*b*t+4*(b)**(2)*(t)**(2)))+(-6*(m[0])**(4)*(9+(13*b*t+4*(b)**(2)*(t)**(2)))+(3*(eJ)**(2)*(m[1]*(5-6*b*t)+2*(m[0])**(2)*(-5+(-6*b*t+4*(b)**(2)*(t)**(2))))+2*eJ*(4*m[2]+(-3*m[0]*m[1]*(13+6*b*t)+3*(m[0])**(3)*(17+(24*b*t+4*(b)**(2)*(t)**(2))))))))))))-2*np.exp((a+3*b)*t)*(-18*m[3]+(18*(m[1])**(2)*(6+5*b*t)+(24*m[0]*m[2]*(6+5*b*t)+(-27*(m[0])**(2)*m[1]*(23+(30*b*t+8*(b)**(2)*(t)**(2)))+((eJ)**(4)*(52+(66*b*t+36*(b)**(2)*(t)**(2)))+(2*(eJ)**(3)*m[0]*(-131+(12*b*t+(18*(b)**(2)*(t)**(2)-18*(b)**(3)*(t)**(3))))+((m[0])**(4)*(394+(642*b*t+(288*(b)**(2)*(t)**(2)+36*(b)**(3)*(t)**(3))))+(-3*(eJ)**(2)*(-3*m[1]*(11+(38*b*t+16*(b)**(2)*(t)**(2)))+(m[0])**(2)*(34+(300*b*t+(204*(b)**(2)*(t)**(2)+24*(b)**(3)*(t)**(3)))))+2*eJ*(6*m[2]*(-2+5*b*t)+(-9*m[0]*m[1]*(-5+(14*b*t+16*(b)**(2)*(t)**(2)))+(m[0])**(3)*(-41+(84*b*t+(126*(b)**(2)*(t)**(2)+36*(b)**(3)*(t)**(3))))))))))))))))))))))))))))

    def cf_bermudan(self,u,t,nQ,N=2**5):
        a     = 0
        b     = nQ
        qt,wt = gauss_legendre(a,b,nQ)
        qt    = qt[:,np.newaxis]
        qs    = qt[:,np.newaxis]
        v     = np.arange(N)/(b-a)*np.pi
        f     = np.empty((u.size,nQ,nQ),complex)

        # Adapted to the dimensions of cf_cj
        cfh = (self.cf_cj(u.squeeze()[:,np.newaxis],v,t,qs)*np.exp(-1j*v*a)
               +self.cf_cj(u.squeeze()[:,np.newaxis],-v,t,qs)*np.exp(1j*v*a))
        cfh = cfh.transpose(1,2,0)   # Transpose to do matrix product
        costerm = np.cos(v*(qt-a))*wt[:,np.newaxis]
        costerm[:,0] *= 0.5
        for i in range(u.size):
            f[i] = np.dot(costerm,cfh[i])

        return f/(b-a),qt.squeeze()
